#include <stdint.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include <error.h>

#include <SDL2/SDL.h>
#include <SDL2/SDL_events.h>
#include <SDL2/SDL_render.h>
#include <SDL2/SDL_surface.h>
#include <SDL2/SDL_video.h>
#include <SDL2/SDL_log.h>
#include <SDL2/SDL_mouse.h>

#include "./gravity.c"

#define SCREEN_WIDTH 1600
#define SCREEN_HEIGHT 900
#define LOGICAL_WIDTH 640
#define LOGICAL_HEIGHT 360

const int X_SCALE = SCREEN_WIDTH / LOGICAL_WIDTH;
const int Y_SCALE = SCREEN_HEIGHT / LOGICAL_HEIGHT;

const uint8_t C_BG[3] = {  20,  31,  64 };
const uint8_t C_FG[3] = { 202, 193, 251 };


int main() {

    // Initialise SDL
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0) {
		fprintf(stderr, "SDL_Init Error: %s\n", SDL_GetError());
		return EXIT_FAILURE;
	}

    // Create window
    int32_t window_flags =
        SDL_WINDOW_ALLOW_HIGHDPI |
        SDL_WINDOW_INPUT_FOCUS |
        // SDL_WINDOW_RESIZABLE | // Enable at least this outside test builds
        // SDL_WINDOW_FULLSCREEN | // if not also this
        // SDL_WINDOW_RESIZABLE | // perhaps enable this at some point?
        SDL_WINDOW_SHOWN;
	SDL_Window* window = SDL_CreateWindow(
        // Title
        "nbody",
        // Coordinates
        SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
        // Dimensions
        SCREEN_WIDTH, SCREEN_HEIGHT,
        window_flags
    );
	if (window == NULL) {
		fprintf(stderr, "SDL_CreateWindow Error: %s\n", SDL_GetError());
		return EXIT_FAILURE;
	}

    // Create renderer
    uint8_t render_flags = SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC;
	SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, render_flags);
	if (renderer == NULL) {
		fprintf(stderr, "SDL_CreateRenderer Error: %s\n", SDL_GetError());
		SDL_DestroyWindow(window);
		SDL_Quit();
		return EXIT_FAILURE;
	}

    // Render at THIS resolution and scale up to SCREEN
    SDL_RenderSetLogicalSize(renderer, LOGICAL_WIDTH, LOGICAL_HEIGHT);

    int SCREEN_X, SCREEN_Y;
    SDL_GetWindowSize(window, &SCREEN_X, &SCREEN_Y);
    SDL_Log("%d by %d\n", SCREEN_X, SCREEN_Y);

    // GAME SETUP

    int mouse_x = 0, mouse_y = 0;
    uint32_t mouse_buttons = 0, last_frame_mouse_buttons = 0;

    Body bodies[100];
    int body_num = 1;

    Body default_body = {
        LOGICAL_WIDTH / 2.0,    // pos_x
        LOGICAL_HEIGHT / 2.0,   // pos_y
        0.0,                    // vel_x
        0.0,                    // vel_y
        5,                      // radius
        5 * 5 * 5 * 4.0 / 3.0,  // mass
    };
    bodies[0] = default_body;


    // EVENT LOOP

    SDL_bool done = SDL_FALSE;
    while (!done) {
        SDL_Event event;

        // Draw background
        SDL_SetRenderDrawColor(renderer, C_BG[0], C_BG[1], C_BG[2], SDL_ALPHA_OPAQUE);
        SDL_RenderClear(renderer);

        // Make sure we have the latest mouse state
        SDL_PumpEvents();

        mouse_buttons = SDL_GetMouseState(&mouse_x, &mouse_y);
        SDL_Log("Mouse cursor is at %d, %d, %d\n", mouse_x, mouse_y, mouse_buttons);
        // if (mouse_buttons == 1 && last_frame_mouse_buttons != 1) {
        //     SDL_Log("Click!\n");
        // }

        // Draw bodies
        SDL_SetRenderDrawColor(renderer, C_FG[0], C_FG[1], C_FG[2], SDL_ALPHA_OPAQUE);
        for (int i = 0; i < body_num; i++) {
            const SDL_Rect body = {
                bodies[i].pos_x,
                bodies[i].pos_y,
                bodies[i].radius,
                bodies[i].radius
            };
            SDL_RenderFillRect(renderer, &body);
        }

        // Draw cursor
        SDL_SetRenderDrawColor(renderer, C_FG[0], C_FG[1], C_FG[2], SDL_ALPHA_OPAQUE);
        SDL_Rect cursor = {
            // mouse_x - 2, mouse_y - 2, 4, 4
            (mouse_x / X_SCALE) - 2, (mouse_y / Y_SCALE) - 2, 4, 4
        };
        SDL_RenderDrawRect(renderer, &cursor);

        // Add body on left click
        SDL_SetRenderDrawColor(renderer, C_FG[0], C_FG[1], C_FG[2], SDL_ALPHA_OPAQUE);
        if (mouse_buttons == 1 && last_frame_mouse_buttons != 1) {
            // const SDL_Rect new_body = {
            //     mouse_x - 2, mouse_y - 2, 4, 4
            // };
            if (body_num < 100) {
                Body new_body = {
                    mouse_x,
                    mouse_y,
                    0.0,
                    0.0,
                    5,
                    5 * 5 * 5 * 4.0 / 3.0,
                };
                bodies[body_num] = new_body;
                body_num++;
            }
        }

        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                done = SDL_TRUE;
            }
        }

        // Render
		SDL_RenderPresent(renderer);

        last_frame_mouse_buttons = mouse_buttons;
	}


    if (renderer) SDL_DestroyRenderer(renderer);
	if (window) SDL_DestroyWindow(window);
	SDL_Quit();
	return EXIT_SUCCESS;
}
